# import speech_recognition as sr
# import pyttsx3
# import os
# import subprocess
# import difflib
# import time
# import webbrowser

# # –ì–æ–ª–æ—Å
# def speak(text):
#     engine = pyttsx3.init()
#     voices = engine.getProperty('voices')
#     ru_voice = None
#     for voice in voices:
#         if "russian" in voice.name.lower() or "—Ä—É—Å" in voice.name.lower():
#             ru_voice = voice.id
#             break
#     if ru_voice:
#         engine.setProperty('voice', ru_voice)
#     print(f"üí¨ {text}")
#     engine.say(text)
#     engine.runAndWait()

# # –°–ª—É—à–∞–µ–º
# def listen():
#     recognizer = sr.Recognizer()
#     with sr.Microphone() as source:
#         print("üé§ –°–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ)...")
#         try:
#             audio = recognizer.listen(source, timeout=5, phrase_time_limit=10)
#             query = recognizer.recognize_google(audio, language="ru-RU")
#             print("–í—ã —Å–∫–∞–∑–∞–ª–∏:", query)
#             return query.lower()
#         except sr.WaitTimeoutError:
#             return ""
#         except:
#             print("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª")
#             return ""

# # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π –∏ –ø–æ–∏—Å–∫ exe
# def try_paths(paths, app_name):
#     tried = []
#     for path in paths:
#         real_path = os.path.expandvars(path)
#         tried.append(real_path)
#         if os.path.exists(real_path):
#             subprocess.Popen(real_path)
#             speak(f"–û—Ç–∫—Ä—ã–≤–∞—é {app_name}")
#             return True

#     # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ exe
#     standard_dirs = [
#         r"C:\Program Files",
#         r"C:\Program Files (x86)",
#         os.path.expandvars(r"C:\Users\%USERNAME%\AppData\Local"),
#         os.path.expandvars(r"C:\Users\%USERNAME%\AppData\Roaming")
#     ]
#     for folder in standard_dirs:
#         for root, dirs, files in os.walk(folder):
#             for file in files:
#                 if app_name.lower().replace(" ", "") in file.lower().replace(" ", "") and file.endswith(".exe"):
#                     exe_path = os.path.join(root, file)
#                     subprocess.Popen(exe_path)
#                     speak(f"–û—Ç–∫—Ä—ã–≤–∞—é {app_name} (–Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
#                     return True

#     speak(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å {app_name}")
#     return False

# # –û—Ç–∫—Ä—ã—Ç–∏–µ YouTube –ø–æ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
# def open_youtube_channel():
#     speak("–ö–æ–≥–æ YouTube-–∫–∞–Ω–∞–ª –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å?")
#     channel_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ: ").strip()
#     if not channel_name:
#         channel_name = listen()
#     if not channel_name:
#         speak("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
#         return
#     search_query = channel_name.replace(" ", "+")
#     url = f"https://www.youtube.com/results?search_query={search_query}"
#     webbrowser.open(url)
#     speak(f"–û—Ç–∫—Ä—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è {channel_name} –Ω–∞ YouTube")

# # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º
# def run_program_exact(command):
#     command = command.lower()
#     chrome_paths = [
#         r"C:\Program Files\Google\Chrome\Application\chrome.exe",
#         r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
#         r"C:\Users\%USERNAME%\AppData\Local\Google\Chrome\Application\chrome.exe"
#     ]
#     telegram_paths = [
#         r"C:\Users\%USERNAME%\AppData\Roaming\Telegram Desktop\Telegram.exe",
#         r"C:\Program Files\Telegram Desktop\Telegram.exe",
#         r"D:\Telegram Desktop\Telegram.exe"
#     ]
#     roblox_paths = [
#         r"C:\Users\%USERNAME%\AppData\Local\Roblox\Versions\RobloxPlayerLauncher.exe",
#         r"C:\Users\%USERNAME%\AppData\Local\Roblox\Versions\version-d34359a5577645e2\RobloxPlayerBeta.exe"
#     ]
#     explorer_paths = [
#         r"C:\Windows\explorer.exe"
#     ]

#     if "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" in command:
#         os.system("start calc")
#         speak("–û—Ç–∫—Ä—ã–≤–∞—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
#         return True
#     if "–±–ª–æ–∫–Ω–æ—Ç" in command:
#         os.system("start notepad")
#         speak("–û—Ç–∫—Ä—ã–≤–∞—é –±–ª–æ–∫–Ω–æ—Ç")
#         return True
#     if "–≥—É–≥–ª" in command or "chrome" in command or "–±—Ä–∞—É–∑–µ—Ä" in command:
#         return try_paths(chrome_paths, "Google Chrome")
#     if "—á–∞—Ç –≥–ø—Ç" in command or "chat gpt" in command:
#         webbrowser.open("https://chat.openai.com")
#         speak("–û—Ç–∫—Ä—ã–≤–∞—é ChatGPT")
#         return True
#     if "—Ç–µ–ª–µ–≥—Ä–∞–º" in command or "telegram" in command:
#         return try_paths(telegram_paths, "Telegram")
#     if "—Ä–æ–±–ª–æ–∫—Å" in command or "roblox" in command:
#         return try_paths(roblox_paths, "Roblox")
#     if "–ø—Ä–æ–≤–æ–¥–Ω–∏–∫" in command or "—Ñ–∞–π–ª—ã" in command:
#         return try_paths(explorer_paths, "–ü—Ä–æ–≤–æ–¥–Ω–∏–∫")
#     if "—é—Ç—É–±" in command or "youtube" in command:
#         open_youtube_channel()
#         return True
#     return False

# # –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
# def file_action(command):
#     desktop = os.path.join(os.path.expanduser("~"), "Desktop")
#     documents = os.path.join(os.path.expanduser("~"), "Documents")
#     current = os.getcwd()

#     if "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª" in command:
#         speak("–ö–∞–∫ –Ω–∞–∑–≤–∞—Ç—å —Ñ–∞–π–ª?")
#         filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: ").strip()
#         if not filename:
#             filename = listen()
#         if not filename:
#             speak("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
#             return
#         file_path = os.path.join(desktop, f"{filename}.txt")
#         with open(file_path, "w", encoding="utf-8") as f:
#             speak("–ß—Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª?")
#             content = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç: ").strip()
#             if not content:
#                 content = listen()
#             if not content:
#                 speak("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
#                 return
#             f.write(content)
#         speak(f"–§–∞–π–ª {filename}.txt —Å–æ–∑–¥–∞–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ.")
#     elif "–ø—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª" in command:
#         speak("–°–∫–∞–∂–∏ –∏–ª–∏ –≤–≤–µ–¥–∏ –∏–º—è —Ñ–∞–π–ª–∞.")
#         filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: ").strip()
#         if not filename:
#             filename = listen()
#         if not filename:
#             speak("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
#             return
#         search_places = [
#             os.path.join(desktop, f"{filename}.txt"),
#             os.path.join(documents, f"{filename}.txt"),
#             os.path.join(current, f"{filename}.txt")
#         ]
#         found = False
#         for file_path in search_places:
#             if os.path.exists(file_path):
#                 with open(file_path, "r", encoding="utf-8") as f:
#                     content = f.read()
#                 speak(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {content}")
#                 found = True
#                 break
#         if not found:
#             speak("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

# # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
# def confirm_and_run(suggestion):
#     speak(f"–¢—ã —ç—Ç–æ –∏–º–µ–ª –≤ –≤–∏–¥—É: {suggestion}?")
#     answer = input("–û—Ç–≤–µ—Ç (–¥–∞/–Ω–µ—Ç) –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ –≥–æ–ª–æ—Å–æ–º: ").strip().lower()
#     if not answer:
#         answer = listen()
#     yes_words = ["–¥–∞", "–∞–≥–∞", "–∏–º–µ–Ω–Ω–æ", "–∫–æ–Ω–µ—á–Ω–æ", "–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "—Ç–æ—á–Ω–æ"]
#     no_words = ["–Ω–µ—Ç", "–Ω–µ"]
#     if any(word in answer for word in yes_words):
#         if "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª" in suggestion or "–ø—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª" in suggestion:
#             file_action(suggestion)
#         elif "—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å" in suggestion or "—á—Ç–æ —É–º–µ–µ—à—å" in suggestion:
#             list_capabilities()
#         else:
#             run_program_exact(suggestion.lower())
#     elif any(word in answer for word in no_words):
#         speak("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
#     else:
#         speak("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

# # –ß—Ç–æ —É–º–µ–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
# def list_capabilities():
#     capabilities = [
#         "–Ø –º–æ–≥—É –æ—Ç–∫—Ä—ã–≤–∞—Ç—å Chrome, Telegram, Roblox, –ø—Ä–æ–≤–æ–¥–Ω–∏–∫, YouTube, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏ –±–ª–æ–∫–Ω–æ—Ç.",
#         "–Ø –º–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã.",
#         "–Ø –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç ChatGPT.",
#         "–Ø –º–æ–≥—É –∏—Å–∫–∞—Ç—å YouTube-–∫–∞–Ω–∞–ª—ã.",
#         "–ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
#         "–ï—Å–ª–∏ —Ç—ã –º–æ–ª—á–∏—à—å —Ç—Ä–∏ –º–∏–Ω—É—Ç—ã, —è –≤—ã–∫–ª—é—á–∞—é—Å—å.",
#         "–Ø —Å–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –∏–º–µ–ª –≤ –≤–∏–¥—É.",
#         "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–µ —Ç–æ–ª—å–∫–æ –≥–æ–≤–æ—Ä–∏—Ç—å, –Ω–æ –∏ –ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é."
#     ]
#     speak("–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:")
#     for line in capabilities:
#         speak(line)

# # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
# def assistant_loop():
#     speak("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.")
#     known_commands = [
#         "–æ—Ç–∫—Ä–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–æ—Ç–∫—Ä–æ–π –≥—É–≥–ª", "–æ—Ç–∫—Ä–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º", "–æ—Ç–∫—Ä–æ–π —Ä–æ–±–ª–æ–∫—Å",
#         "–æ—Ç–∫—Ä–æ–π –±–ª–æ–∫–Ω–æ—Ç", "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª", "–ø—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª", "–ø—Ä–∏–≤–µ—Ç",
#         "–æ—Ç–∫—Ä–æ–π —é—Ç—É–±", "–æ—Ç–∫—Ä–æ–π —á–∞—Ç –≥–ø—Ç", "–æ—Ç–∫—Ä–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫",
#         "—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å", "—á—Ç–æ —É–º–µ–µ—à—å"
#     ]

#     last_active = time.time()
#     while True:
#         print("\n‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –≥–æ–≤–æ—Ä–∏—Ç—å): ")
#         text_input = input().strip().lower()
#         if text_input:
#             command = text_input
#         else:
#             command = listen()

#         if command:
#             last_active = time.time()
#         else:
#             if time.time() - last_active > 180:
#                 speak("–¢—Ä–∏ –º–∏–Ω—É—Ç—ã —Ç–∏—à–∏–Ω—ã. –í—ã–∫–ª—é—á–∞—é—Å—å.")
#                 break
#             continue

#         if any(word in command for word in ["—Å—Ç–æ–ø", "–æ—Ç–∫–ª—é—á–∏—Å—å"]):
#             speak("–û—Ç–∫–ª—é—á–∞—é—Å—å. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
#             break
#         if "—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å" in command or "—á—Ç–æ —É–º–µ–µ—à—å" in command:
#             list_capabilities()
#             continue
#         if run_program_exact(command):
#             continue
#         elif "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª" in command or "–ø—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª" in command:
#             file_action(command)
#         elif "–ø—Ä–∏–≤–µ—Ç" in command:
#             speak("–ü—Ä–∏–≤–µ—Ç, —á–µ–º –ø–æ–º–æ—á—å?")
#         else:
#             suggestion = difflib.get_close_matches(command, known_commands, n=1, cutoff=0.6)
#             if suggestion:
#                 confirm_and_run(suggestion[0])
#             else:
#                 speak("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

# if __name__ == "__main__":
#     assistant_loop()
import speech_recognition as sr
import pyttsx3
import os
import subprocess
import difflib
import time
import webbrowser

# –ì–æ–ª–æ—Å
def speak(text):
    engine = pyttsx3.init()
    voices = engine.getProperty('voices')
    ru_voice = None
    for voice in voices:
        if "russian" in voice.name.lower() or "—Ä—É—Å" in voice.name.lower():
            ru_voice = voice.id
            break
    if ru_voice:
        engine.setProperty('voice', ru_voice)
    print(f"üí¨ {text}")
    engine.say(text)
    engine.runAndWait()

# –°–ª—É—à–∞–µ–º
def listen():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("üé§ –°–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ)...")
        try:
            audio = recognizer.listen(source, timeout=5, phrase_time_limit=10)
            query = recognizer.recognize_google(audio, language="ru-RU")
            print("–í—ã —Å–∫–∞–∑–∞–ª–∏:", query)
            return query.lower()
        except sr.WaitTimeoutError:
            return ""
        except:
            print("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª")
            return ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π –∏ –ø–æ–∏—Å–∫ exe
def try_paths(paths, app_name):
    tried = []
    for path in paths:
        real_path = os.path.expandvars(path)
        tried.append(real_path)
        if os.path.exists(real_path):
            subprocess.Popen(real_path)
            speak(f"–û—Ç–∫—Ä—ã–≤–∞—é {app_name}")
            return True

    # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ exe
    standard_dirs = [
        r"C:\Program Files",
        r"C:\Program Files (x86)",
        os.path.expandvars(r"C:\Users\%USERNAME%\AppData\Local"),
        os.path.expandvars(r"C:\Users\%USERNAME%\AppData\Roaming")
    ]
    for folder in standard_dirs:
        for root, dirs, files in os.walk(folder):
            for file in files:
                if app_name.lower().replace(" ", "") in file.lower().replace(" ", "") and file.endswith(".exe"):
                    exe_path = os.path.join(root, file)
                    subprocess.Popen(exe_path)
                    speak(f"–û—Ç–∫—Ä—ã–≤–∞—é {app_name} (–Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
                    return True

    speak(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å {app_name}")
    return False

# –û—Ç–∫—Ä—ã—Ç–∏–µ YouTube –ø–æ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
def open_youtube_channel():
    speak("–ö–æ–≥–æ YouTube-–∫–∞–Ω–∞–ª –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å?")
    channel_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ: ").strip()
    if not channel_name:
        channel_name = listen()
    if not channel_name:
        speak("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    search_query = channel_name.replace(" ", "+")
    url = f"https://www.youtube.com/results?search_query={search_query}"
    webbrowser.open(url)
    speak(f"–û—Ç–∫—Ä—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è {channel_name} –Ω–∞ YouTube")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º
def run_program_exact(command):
    command = command.lower()
    chrome_paths = [
        r"C:\Program Files\Google\Chrome\Application\chrome.exe",
        r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
        r"C:\Users\%USERNAME%\AppData\Local\Google\Chrome\Application\chrome.exe"
    ]
    telegram_paths = [
        r"C:\Users\%USERNAME%\AppData\Roaming\Telegram Desktop\Telegram.exe",
        r"C:\Program Files\Telegram Desktop\Telegram.exe",
        r"D:\Telegram Desktop\Telegram.exe"
    ]
    roblox_paths = [
        r"C:\Users\%USERNAME%\AppData\Local\Roblox\Versions\RobloxPlayerLauncher.exe",
        r"C:\Users\%USERNAME%\AppData\Local\Roblox\Versions\version-d34359a5577645e2\RobloxPlayerBeta.exe"
    ]
    explorer_paths = [
        r"C:\Windows\explorer.exe"
    ]

    if "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" in command:
        os.system("start calc")
        speak("–û—Ç–∫—Ä—ã–≤–∞—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
        return True
    if "–±–ª–æ–∫–Ω–æ—Ç" in command:
        os.system("start notepad")
        speak("–û—Ç–∫—Ä—ã–≤–∞—é –±–ª–æ–∫–Ω–æ—Ç")
        return True
    if "–≥—É–≥–ª" in command or "chrome" in command or "–±—Ä–∞—É–∑–µ—Ä" in command:
        return try_paths(chrome_paths, "Google Chrome")
    if "—á–∞—Ç –≥–ø—Ç" in command or "chat gpt" in command:
        webbrowser.open("https://chat.openai.com")
        speak("–û—Ç–∫—Ä—ã–≤–∞—é ChatGPT")
        return True
    if "—Ç–µ–ª–µ–≥—Ä–∞–º" in command or "telegram" in command:
        return try_paths(telegram_paths, "Telegram")
    if "—Ä–æ–±–ª–æ–∫—Å" in command or "roblox" in command:
        return try_paths(roblox_paths, "Roblox")
    if "–ø—Ä–æ–≤–æ–¥–Ω–∏–∫" in command or "—Ñ–∞–π–ª—ã" in command:
        return try_paths(explorer_paths, "–ü—Ä–æ–≤–æ–¥–Ω–∏–∫")
    if "—é—Ç—É–±" in command or "youtube" in command:
        open_youtube_channel()
        return True
    return False

# –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
def file_action(command):
    desktop = os.path.join(os.path.expanduser("~"), "Desktop")
    documents = os.path.join(os.path.expanduser("~"), "Documents")
    current = os.getcwd()

    if "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª" in command:
        speak("–ö–∞–∫ –Ω–∞–∑–≤–∞—Ç—å —Ñ–∞–π–ª?")
        filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: ").strip()
        if not filename:
            filename = listen()
        if not filename:
            speak("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        file_path = os.path.join(desktop, f"{filename}.txt")
        with open(file_path, "w", encoding="utf-8") as f:
            speak("–ß—Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª?")
            content = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç: ").strip()
            if not content:
                content = listen()
            if not content:
                speak("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
            f.write(content)
        speak(f"–§–∞–π–ª {filename}.txt —Å–æ–∑–¥–∞–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ.")
    elif "–ø—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª" in command:
        speak("–°–∫–∞–∂–∏ –∏–ª–∏ –≤–≤–µ–¥–∏ –∏–º—è —Ñ–∞–π–ª–∞.")
        filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: ").strip()
        if not filename:
            filename = listen()
        if not filename:
            speak("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        search_places = [
            os.path.join(desktop, f"{filename}.txt"),
            os.path.join(documents, f"{filename}.txt"),
            os.path.join(current, f"{filename}.txt")
        ]
        found = False
        for file_path in search_places:
            if os.path.exists(file_path):
                with open(file_path, "r", encoding="utf-8") as f:
                    content = f.read()
                speak(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {content}")
                found = True
                break
        if not found:
            speak("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
def confirm_and_run(suggestion):
    speak(f"–¢—ã —ç—Ç–æ –∏–º–µ–ª –≤ –≤–∏–¥—É: {suggestion}?")
    answer = input("–û—Ç–≤–µ—Ç (–¥–∞/–Ω–µ—Ç) –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ –≥–æ–ª–æ—Å–æ–º: ").strip().lower()
    if not answer:
        answer = listen()
    yes_words = ["–¥–∞", "–∞–≥–∞", "–∏–º–µ–Ω–Ω–æ", "–∫–æ–Ω–µ—á–Ω–æ", "–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "—Ç–æ—á–Ω–æ"]
    no_words = ["–Ω–µ—Ç", "–Ω–µ"]
    if any(word in answer for word in yes_words):
        if "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª" in suggestion or "–ø—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª" in suggestion:
            file_action(suggestion)
        elif "—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å" in suggestion or "—á—Ç–æ —É–º–µ–µ—à—å" in suggestion:
            list_capabilities()
        else:
            run_program_exact(suggestion.lower())
    elif any(word in answer for word in no_words):
        speak("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        speak("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

# –ß—Ç–æ —É–º–µ–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
def list_capabilities():
    capabilities = [
        "–Ø –º–æ–≥—É –æ—Ç–∫—Ä—ã–≤–∞—Ç—å Chrome, Telegram, Roblox, –ø—Ä–æ–≤–æ–¥–Ω–∏–∫, YouTube, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏ –±–ª–æ–∫–Ω–æ—Ç.",
        "–Ø –º–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã.",
        "–Ø –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç ChatGPT.",
        "–Ø –º–æ–≥—É –∏—Å–∫–∞—Ç—å YouTube-–∫–∞–Ω–∞–ª—ã.",
        "–ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        "–ï—Å–ª–∏ —Ç—ã –º–æ–ª—á–∏—à—å —Ç—Ä–∏ –º–∏–Ω—É—Ç—ã, —è –≤—ã–∫–ª—é—á–∞—é—Å—å.",
        "–Ø —Å–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –∏–º–µ–ª –≤ –≤–∏–¥—É.",
        "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–µ —Ç–æ–ª—å–∫–æ –≥–æ–≤–æ—Ä–∏—Ç—å, –Ω–æ –∏ –ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é."
    ]
    speak("–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:")
    for line in capabilities:
        speak(line)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
def assistant_loop():
    speak("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.")
    known_commands = [
        "–æ—Ç–∫—Ä–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–æ—Ç–∫—Ä–æ–π –≥—É–≥–ª", "–æ—Ç–∫—Ä–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º", "–æ—Ç–∫—Ä–æ–π —Ä–æ–±–ª–æ–∫—Å",
        "–æ—Ç–∫—Ä–æ–π –±–ª–æ–∫–Ω–æ—Ç", "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª", "–ø—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª", "–ø—Ä–∏–≤–µ—Ç",
        "–æ—Ç–∫—Ä–æ–π —é—Ç—É–±", "–æ—Ç–∫—Ä–æ–π —á–∞—Ç –≥–ø—Ç", "–æ—Ç–∫—Ä–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫",
        "—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å", "—á—Ç–æ —É–º–µ–µ—à—å"
    ]

    last_active = time.time()
    while True:
        print("\n‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –≥–æ–≤–æ—Ä–∏—Ç—å): ")
        text_input = input().strip().lower()
        if text_input:
            command = text_input
        else:
            command = listen()

        if command:
            last_active = time.time()
        else:
            if time.time() - last_active > 180:
                speak("–¢—Ä–∏ –º–∏–Ω—É—Ç—ã —Ç–∏—à–∏–Ω—ã. –í—ã–∫–ª—é—á–∞—é—Å—å.")
                break
            continue

        if any(word in command for word in ["—Å—Ç–æ–ø", "–æ—Ç–∫–ª—é—á–∏—Å—å"]):
            speak("–û—Ç–∫–ª—é—á–∞—é—Å—å. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        if "—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å" in command or "—á—Ç–æ —É–º–µ–µ—à—å" in command:
            list_capabilities()
            continue
        if run_program_exact(command):
            continue
        elif "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª" in command or "–ø—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª" in command:
            file_action(command)
        elif "–ø—Ä–∏–≤–µ—Ç" in command:
            speak("–ü—Ä–∏–≤–µ—Ç, —á–µ–º –ø–æ–º–æ—á—å?")
        else:
            suggestion = difflib.get_close_matches(command, known_commands, n=1, cutoff=0.6)
            if suggestion:
                confirm_and_run(suggestion[0])
            else:
                speak("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

if __name__ == "__main__":
    assistant_loop()